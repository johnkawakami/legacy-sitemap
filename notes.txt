# Deployment Blues


We need it like this:

http://example.com/legacy-sitemap/api/
http://example.com/legacy-sitemap/app/

Config on the web host

.../example.com/public/
.../example.com/public/legacy-sitemap/ - blank page
.../example.com/public/legacy-sitemap/api/ - php app access root
.../example.com/public/legacy-sitemap/app/ - the static js app
.../example.com/legacy-sitemap/
.../example.com/legacy-sitemap/vendor/
.../example.com/legacy-sitemap/phpsrc/


The dev env should be structured like this:

<prj>/public/<prj>/
<prj>/public/<prj>/api/
<prj>/public/<prj>/app/
----- this is the composer and php parts---
<prj>/<prj>/vendor/
<prj>/<prj>/src/
<prj>/<prj>/tests/
<prj>/<prj>/logs/
<prj>/<prj>/templates/
<prj>/<prj>/data/
<prj>/<prj>/public/
<prj>/<prj>/composer.json
----- this is the npm js part
<prj>/app/package.json
<prj>/app/node_modules/
<prj>/app/src/
<prj>/app/public/


---- sample data
Redirect	http://content/1441.html	http://riceball.com/sysadmin/postfix-config-on-debian-ubuntu-linux-to-get-past-my-uptight-spamassassin-filters/	[R=301,NC,L]
Redirect	http://content/1489.html	http://riceball.com/sysadmin/devpi-on-apache-with-daemontools-supervise/	[R=301,NC,L]
Redirect	http://content/1492.html	http://riceball.com/sysadmin/local-npm-with-daemontools/	[R=301,NC,L]
Redirect	http://content/1502.html	http://riceball.com/sysadmin/learning-to-install-mongodb/	[R=301,NC,L]
Redirect	http://content/1507.html	http://riceball.com/sysadmin/error-1698-28000-access-denied-for-user-rootlocalhost/	[R=301,NC,L]
Redirect	http://content/431.html	http://riceball.com/sysadmin/a-safer-way-to-copy-a-directory/	[R=301,NC,L]
Redirect	http://content/531.html	http://riceball.com/sysadmin/daylight-savings-time-misconfigurations-between-computers-can-lead-to-cumulative-data-errors/	[R=301,NC,L]
Redirect	http://content/842.html	http://riceball.com/sysadmin/testing-for-hack-scripts-scan-your-uploads/	[R=301,NC,L]
Redirect	http://content/980.html	http://riceball.com/sysadmin/payment-card-industry-data-security-standard-pci-dss-getting-with-the-program/	[R=301,NC,L]
Redirect	http://content/conditional-if-statements-dos-batch-files-bat-and-little-goto.html	http://riceball.com/sysadmin/conditional-if-statements-in-dos-batch-files-bat-and-a-little-goto/	[R=301,NC,L]
Redirect	http://content/finding-anagrams-list.html	http://riceball.com/sysadmin/finding-anagrams-in-a-list/	[R=301,NC,L]
Redirect	http://content/formatting-mobile-html-email.html	http://riceball.com/sysadmin/formatting-mobile-html-email/	[R=301,NC,L]
Redirect	http://content/perl-mechanize-extract-date.html	http://riceball.com/sysadmin/perl-mechanize-screen-scraper-makes-it-easy-to-copy-data-from-web-pages/	[R=301,NC,L]
Redirect	http://content/turning-california-warn-pdfs-text.html	http://riceball.com/sysadmin/turning-california-warn-pdfs-into-text/	[R=301,NC,L]



--------------


    RedirectTableGateways:
        ApacheRedirectTableGateway - reads and writes apache redirecs
        HtmlImportRedirectTableGateway - reads html import redirects

    RedirectTableTS - adds search, save

    RedirectImportationProvider

I settled on using this data structure as the mezzanine level: { 'file':..., 'url':... }

Internally, it's stored like that, or as a hash. Hashes get rid of duplicate keys, which is what
we want with the files. Duplicate urls are OK.

Logic got split in a bunch of ways, but the layers are:

    RedirectImportationProvider
    RedirectTableTS
    RedirectTableGateway

The provider implements most of the API. It accepts three dependencies: a data source,
a data output destination (an exporter), and database table store.  The code in router calls the provider, 
and cobbles together a response.

TS is for "Transaction Script", the lowest form of domain logic pattern, a mishmash
of functions in a class, with database code as well.  It might be broken into
a database and a query layer with the domain logic.

This must be some kind of pattern, where you have inputs and outputs,
and a database in between that manages db issues like duplicates, sorting,
filtering, aggregating, etc.  So each service orchestrates between three
parts.

